#!/usr/bin/env python3
"""Classify trajectories from IY010 simulation ratio experiments.

This script mirrors the classification pipeline used in
``IY007_varying_mu.py`` and applies it to the datasets generated by the
IY010 ratio simulation scripts. For each statistic (mean ``mu``,
coefficient of variation ``cv``, and autocorrelation time ``t_ac``),
trajectories generated at the baseline ratio are compared against those
at other ratios using a suite of classifiers.
"""

import os
from pathlib import Path
import sys
import pandas as pd
import numpy as np

# Ensure ``src`` is on the path for local imports
sys.path.append(str(Path(__file__).resolve().parents[2] / "src"))

from stats.report import statistical_report
from utils.load_data import load_and_split_data
from classifiers.svm_classifier import svm_classifier
from classifiers.random_forest_classifier import random_forest_classifier
from classifiers.logistic_regression_classifier import logistic_regression_classifier
from classifiers.mlp_classifier import mlp_classifier
from classifiers.lstm_classifier import lstm_classifier
from classifiers.random_classifier import random_classifier
from classifiers.transformer_classifier import transformer_classifier


def load_trajectories(file_list, data_dir):
    """Load and stack trajectories from a list of CSV files."""
    arrays = []
    for fname in file_list:
        df = pd.read_csv(Path(data_dir) / fname)
        arrays.append(df.values)
    return np.vstack(arrays)


def classify_ratios(stat_name, data_dir, params_csv, base_ratio=1.0):
    """Run classifiers for a given statistic across different ratios."""
    data_dir = Path(data_dir)
    params_df = pd.read_csv(data_dir / params_csv)
    base_df = params_df[params_df["ratio"] == base_ratio]
    ratios = sorted(r for r in params_df["ratio"].unique() if r != base_ratio)

    results = []
    for ratio in ratios:
        ratio_df = params_df[params_df["ratio"] == ratio]

        base_trajs = load_trajectories(base_df["trajectory_filename"], data_dir)
        ratio_trajs = load_trajectories(ratio_df["trajectory_filename"], data_dir)

        labels = np.concatenate([
            np.zeros(base_trajs.shape[0]),
            np.ones(ratio_trajs.shape[0]),
        ])
        combined = np.vstack([base_trajs, ratio_trajs])
        dataset = pd.DataFrame(combined)
        dataset.insert(0, "label", labels)
        temp_path = data_dir / f"temp_{stat_name}_{ratio:.1f}.csv"
        dataset.to_csv(temp_path, index=False)

        # Use first parameter set from each group for reporting
        param_base = base_df.iloc[0][["sigma_u", "sigma_b", "rho", "d"]].to_dict()
        param_base["label"] = 0
        param_ratio = ratio_df.iloc[0][["sigma_u", "sigma_b", "rho", "d"]].to_dict()
        param_ratio["label"] = 1
        parameter_sets = [param_ratio, param_base]
        stats = statistical_report(parameter_sets, ratio_trajs, base_trajs)

        X_train, X_val, X_test, y_train, y_val, y_test = load_and_split_data(
            temp_path, split_val_size=0.2
        )

        # Baseline classifiers
        svm_rbf_accuracy = svm_classifier(X_train, X_test, y_train, y_test)
        svm_linear_accuracy = svm_classifier(
            X_train, X_test, y_train, y_test, svm_kernel="linear"
        )
        rf_accuracy = random_forest_classifier(X_train, X_test, y_train, y_test)
        log_reg_accuracy = logistic_regression_classifier(
            X_train, X_test, y_train, y_test
        )
        mlp_accuracy = mlp_classifier(
            X_train, X_val, X_test, y_train, y_val, y_test, epochs=100
        )
        lstm_accuracy = lstm_classifier(
            X_train,
            X_val,
            X_test,
            y_train,
            y_val,
            y_test,
            epochs=50,
            use_conv1d=False,
            use_attention=False,
            use_auxiliary=False,
        )
        iy001a_lstm_accuracy = lstm_classifier(
            X_train,
            X_val,
            X_test,
            y_train,
            y_val,
            y_test,
            epochs=100,
            hidden_size=128,
            num_layers=4,
            dropout_rate=0.2,
            learning_rate=0.001,
            batch_size=64,
            use_conv1d=True,
            use_attention=True,
            num_attention_heads=4,
            use_auxiliary=True,
        )
        iy006c_transformer_accuracy = transformer_classifier(
            X_train,
            X_val,
            X_test,
            y_train,
            y_val,
            y_test,
            d_model=128,
            nhead=4,
            num_layers=2,
            dropout_rate=0.1,
            learning_rate=0.01,
            batch_size=64,
            epochs=50,
            pooling_strategy="last",
            use_conv1d=True,
            use_auxiliary=False,
            gradient_clip=1.0,
        )
        transformer_accuracy = transformer_classifier(
            X_train,
            X_val,
            X_test,
            y_train,
            y_val,
            y_test,
            d_model=64,
            nhead=4,
            num_layers=2,
            epochs=50,
            use_conv1d=False,
            use_auxiliary=False,
        )
        transformer_full_accuracy = transformer_classifier(
            X_train,
            X_val,
            X_test,
            y_train,
            y_val,
            y_test,
            d_model=128,
            nhead=8,
            num_layers=4,
            epochs=50,
            use_conv1d=True,
            use_auxiliary=True,
        )
        random_accuracy = random_classifier(y_test)

        df_result = pd.DataFrame(
            {
                "Stat": [stat_name],
                "Ratio": [ratio],
                "Stats": [stats],
                "SVM (rbf) Accuracy": [svm_rbf_accuracy],
                "SVM (linear) Accuracy": [svm_linear_accuracy],
                "Random Forest Accuracy": [rf_accuracy],
                "Logistic Regression Accuracy": [log_reg_accuracy],
                "MLP Accuracy": [mlp_accuracy],
                "Random Classifier Accuracy": [random_accuracy],
                "Vanilla LSTM Accuracy": [lstm_accuracy],
                "IY001A Accuracy": [iy001a_lstm_accuracy],
                "IY006C-Transformer Accuracy": [iy006c_transformer_accuracy],
                "Vanilla Transformer Accuracy": [transformer_accuracy],
                "Full Transformer Accuracy": [transformer_full_accuracy],
            }
        )
        results.append(df_result)

        os.remove(temp_path)

    results_df = pd.concat(results, ignore_index=True)
    out_file = data_dir / f"classification_results_{stat_name}.csv"
    results_df.to_csv(out_file, index=False)
    print(f"Saved classification results to {out_file}")


if __name__ == "__main__":
    base_dir = Path(__file__).resolve().parent
    classify_ratios(
        "mu",
        base_dir / "data_7_mu_ratios",
        "IY010_simulation_parameters_7_mu_ratios.csv",
        base_ratio=1.0,
    )
    classify_ratios(
        "cv",
        base_dir / "data_7_cv_ratios",
        "IY010_simulation_parameters_7_cv_ratios.csv",
        base_ratio=1.0,
    )
    classify_ratios(
        "t_ac",
        base_dir / "data_t_ac_ratio",
        "IY010_simulation_parameters_t_ac_ratio.csv",
        base_ratio=1.0,
    )
